/**
* Allow to extend several classes in a single bunch
**/
@mixin apply($list){
  @each $toapply in $list {
    @extend .#{$toapply};
  }
}

/**
* Build a media query, mobile firstly.
* Requires at least one breakpoint value to work.
* You can use registered breakpoints (s) or absolute values (1300px).
* Highest breakpoint value will be considered as a max-width, while the other one will be min-width.
* ex. : @include resp(s) => @media screen and (max-width:620px)
* ex. : @include resp(m s) => @media screen and (max-width:768px) and (min-width:620px)
*/
@mixin resp($bps){
  $max : 0px;

  @if length($bps) > 2{
    @error "Maximum 2 breakpoints values are allowed to build a media query.";
  }

  @each $breakpoint in $bps{
    // If an absolute value is used, check if that value is registered or not in breakpoints map.
    // This is just an indication.
    @if map-has-key($breakpoints, $breakpoint) == false{
      @if index(map-values($breakpoints),$breakpoint) == null{
        @debug "Breakpoint absolute value used ( #{$breakpoint} ). Register it if widely used.";
      }@else{
        @debug "Duplicate breakpoint : absolute value \"#{$breakpoint}\" is also available with mapped breakpoints.";
      }
    }

    // Type validation and find highest value
    @if (type-of($breakpoint) != "number") and (type-of($breakpoint) != "string"){
      @error "Type error : #{$breakpoint}";
    }

    // Retrieve the real value in px
    $value : if( type-of($breakpoint) == "string",
                map-get($breakpoints, $breakpoint),
                $breakpoints
              );

    @if ($value > $max) and (length($bps) > 1){
      $max: $value;
    }

  }


  $str : "";
  @each $breakpoint in $bps{

    // Retrieve the real value in px
    $value : if( type-of($breakpoint) == "string",
      map-get($breakpoints, $breakpoint),
      $breakpoints
    );

    @if $max == $value{
      $str : "#{$str} and (max-width:#{$value})";
    } @else {
      $str : "#{$str} and (min-width:#{$value + 1px})";

    }
  }

  @if $str != ""{
    @media screen#{$str}{
      @content;
    }
  }

}




/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}


@function ui-color($colorName){
  @return map-get($colors, $colorName );
}
