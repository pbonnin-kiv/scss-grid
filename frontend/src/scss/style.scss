@import 'sonar/index.scss';

/* SETTINGS */
// Add a prefix to all selectors (gap becomes ui-gap when $id = ui-) - default : '' ( no prefix )
$id: '';
// Enable grid's cols & col properties for flex layout.
$enable-flex-grid: true;
// When set to false, all vars are set once in body, allowing scope inheritance in nested layouts.
// When set to true, all layouts contain reseted vars, preventing any inheritance in nested layouts.
$scope-vars-in-each-layout: false;

/* SONAR 2 */
// Placeholder to reset vars
%init-vars {
  // Number of columns set in a layout scope.
  --#{$id}cols: 1;
  // Gap between columns set in a layout scope.
  --#{$id}hgap: unset;
  --#{$id}vgap: unset;

  @if ($enable-flex-grid) {
    // "p-xxxx" variables are used to retain the parent's value for flex layout.
    --#{$id}p-cols: 1;
    --#{$id}p-hgap: unset;
    --#{$id}p-vgap: unset;
  }
  // Number of columns spaning set in a layout item scope.
  --#{$id}colspan: 1;
}

// Initialize css variables
#{if($scope-vars-in-each-layout, "*[class*='#{$id}layout']", "body")} {
  @extend %init-vars;
}

/* The loop... creates all required selectors for each breakpoint */
@each $breakpoint, $value in $breakpoints {
  @include resp($breakpoint) {
    $selector: if($breakpoint == xxs, '', --#{$breakpoint});
    // Store into scoped css3 variables propers columns parameters.
    @for $i from 1 to $grid-columns-number + 1 {
      $sel: if($selector == '', '--', $selector);
      *[#{$id}cols*='#{$sel}#{$i}'] {
        --#{$id}cols: #{$i};
        @if ($enable-flex-grid) {
          > * {
            --#{$id}p-cols: #{$i};
          }
        }
      }
      *[#{$id}col*='#{$sel}#{$i}'] {
        --#{$id}colspan: #{$i};
      }
    }
    // Store into scoped css3 variables propers gaps parameters.
    $sel: if($breakpoint == xxs, '--', #{$breakpoint});
    @each $key, $value in $gaps {
      *[#{$id}gap*='#{$sel}#{$key}'] {
        --#{$id}vgap: #{$value};
        --#{$id}hgap: #{$value};
        @if ($enable-flex-grid) {
          > * {
            --#{$id}p-vgap: #{$value};
            --#{$id}p-hgap: #{$value};
          }
        }
      }
      *[#{$id}gap*='#{$sel}v#{$key}'] {
        --#{$id}vgap: #{$value};
        @if ($enable-flex-grid) {
          > * {
            --#{$id}p-vgap: #{$value};
          }
        }
      }
      *[#{$id}gap*='#{$sel}h#{$key}'] {
        --#{$id}hgap: #{$value};
        @if ($enable-flex-grid) {
          > * {
            --#{$id}p-hgap: #{$value};
          }
        }
      }
    }
    // Global Layout rules.
    *[class*='#{$id}layout'] {
      $displays: none, block, flex, grid;
      @each $display in $displays {
        &[class*='--#{$display}#{$selector}'] {
          display: $display;
        }
      }
      &[class*='#{$selector}--auto'] {
        grid-auto-flow: column;
        > * {
          flex: 1 1 auto;
        }
      }
      &[class*='#{$selector}--space-between'] {
        justify-content: space-between;
      }
      &[class*='#{$selector}--stretch'] {
        justify-content: stretch;
      }
      &[class*='#{$selector}--start'] {
        justify-content: flex-start;
        justify-content: start;
      }
      &[class*='#{$selector}--end'] {
        justify-content: flex-end;
        justify-content: end;
      }
      &[class*='#{$selector}--align-stretch'] {
        align-items: stretch;
      }
      &[class*='#{$selector}--align-start'] {
        align-items: flex-start;
        align-items: start;
      }
      &[class*='#{$selector}--align-end'] {
        align-items: flex-end;
        align-items: end;
      }
    }

    // Specific Flex layout.
    *[class*='#{$id}flex'] {
      // Containing layout.
      &[class*='#{$selector}--wrap'] {
        flex-wrap: wrap;
      }
      &[class*='#{$selector}--nowrap'] {
        flex-wrap: nowrap;
      }
      &[class*='#{$selector}--row'] {
        flex-direction: row;
      }
      &[class*='#{$selector}--column'] {
        flex-direction: column;
      }
      // Contained layout.
      &[class*='#{$selector}--none'] {
        flex: none;
      }
      &[class*='#{$selector}--auto'] {
        flex: 1 1 auto;
      }
    }
  }
}

*[#{$id}cols] {
  grid-template-columns: repeat(var(--#{$id}cols), 1fr);
  @if ($enable-flex-grid) {
    > * {
      // Flex basis for flex layouts without gap.
      flex: 0 0 calc((100% / var(--#{$id}p-cols)));
      // Flex basis for flex layouts with gap.
      flex: 0
        0
        calc(
          (100% / var(--#{$id}p-cols)) -
            var(--#{$id}p-hgap) *
            (var(--#{$id}p-cols) - 1) /
            var(--#{$id}p-cols)
        );
    }
  }
}

*[#{$id}col] {
  grid-column: span var(--#{$id}colspan);
  @if ($enable-flex-grid) {
    // Flex basis for flex layouts without gap.
    flex-basis: calc((100% / var(--#{$id}cols) * var(--#{$id}colspan)));
    // Flex basis for flex layouts with gap.
    flex-basis: calc(
      (100% - (var(--#{$id}p-hgap) * (var(--#{$id}p-cols) - 1))) /
        var(--#{$id}p-cols) *
        var(--#{$id}colspan) +
        (var(--#{$id}p-hgap) * (var(--#{$id}colspan) - 1))
    );
  }
}

*[#{$id}gap] {
  column-gap: var(--#{$id}hgap);
  row-gap: var(--#{$id}vgap);
}
